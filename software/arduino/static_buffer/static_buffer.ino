/* Edge Impulse ingestion SDK
 * Copyright (c) 2022 EdgeImpulse Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* Includes ---------------------------------------------------------------- */
#include <Mapped_Range_v5_inferencing.h>

static const float features[] = {
    // copy raw features here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-arduino
    53, 53, 54, 53, 54, 53, 53, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 53, 54, 52, 54, 53, 54, 53, 54, 53, 54, 53, 54, 53, 53, 52, 53, 53, 54, 53, 54, 52, 53, 52, 53, 53, 54, 53, 53, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 52, 53, 53, 54, 52, 54, 52, 54, 53, 54, 52, 55, 52, 54, 53, 54, 52, 53, 53, 56, 52, 55, 50, 56, 54, 53, 52, 56, 52, 50, 54, 59, 52, 53, 52, 56, 53, 50, 53, 53, 52, 48, 55, 58, 54, 49, 57, 54, 55, 52, 54, 50, 52, 54, 55, 52, 52, 54, 54, 53, 53, 54, 51, 51, 52, 53, 51, 51, 52, 52, 51, 53, 52, 52, 51, 53, 52, 52, 52, 54, 52, 53, 53, 54, 53, 54, 53, 54, 53, 52, 55, 54, 53, 55, 52, 55, 52, 54, 50, 54, 53, 54, 50, 54, 53, 53, 50, 56, 54, 53, 49, 55, 53, 53, 50, 54, 52, 53, 55, 54, 53, 53, 54, 53, 53, 53, 54, 52, 53, 53, 54, 53, 52, 53, 53, 54, 53, 52, 54, 53, 53, 52, 53, 54, 52, 51, 52, 54, 52, 51, 52, 53, 53, 51, 53, 52, 52, 52, 53, 53, 52, 52, 53, 53, 53, 52, 53, 52, 52, 52, 53, 53, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 55, 53, 53, 53, 55, 52, 53, 54, 55, 52, 53, 53, 55, 52, 53, 53, 54, 52, 53, 53, 54, 53, 54, 53, 53, 52, 53, 52, 53, 53, 53, 53, 53, 52, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 53, 53, 53, 53, 53, 53, 52, 53, 52, 53, 53, 53, 53, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 54, 53, 53, 53, 53, 52, 53, 52, 54, 53, 53, 53, 55, 53, 53, 53, 55, 53, 53, 53, 56, 53, 53, 53, 56, 53, 53, 53, 57, 53, 54, 53, 57, 53, 53, 53, 56, 53, 55, 53, 54, 54, 55, 53, 55, 53, 56, 53, 52, 54, 56, 52, 52, 53, 56, 53, 49, 53, 57, 53, 45, 52, 58, 53, 45, 52, 57, 52, 46, 52, 56, 52, 47, 53, 54, 52, 52, 53, 54, 61, 53, 53, 52, 50, 54, 50, 51, 52, 58, 51, 43, 49, 57, 53, 52, 51, 55, 44, 52, 53, 54, 41, 50, 56, 54, 47, 51, 52, 54, 50, 54, 53, 53, 51, 55, 53, 53, 55, 53, 53, 54, 56, 56, 53, 54, 54, 56, 54, 53, 54, 58, 53, 53, 54, 57, 52, 52, 52, 56, 53, 52, 53, 55, 53, 52, 53, 55, 53, 53, 54, 54, 53, 53, 54, 53, 53, 53, 54, 53, 52, 53, 53, 53, 53, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 53, 52, 52, 53, 53, 52, 52, 53, 52, 53, 52, 53, 51, 53, 52, 53, 52, 53, 52, 52, 53, 53, 51, 52, 53, 53, 52, 53, 53, 53, 52, 52, 52, 53, 52, 53, 53, 52, 52, 53, 53, 53, 53, 53, 54, 53, 53, 53, 55, 53, 54, 53, 56, 53, 53, 53, 57, 53, 53, 53, 56, 53, 53, 53, 56, 52, 52, 53, 56, 53, 53, 53, 55, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 52, 53, 52, 53, 52, 53, 52, 53, 51, 52, 52, 53, 52, 53, 52, 54, 52, 52, 52, 52, 53, 52, 53, 53, 53, 53, 51, 53, 53, 53, 51, 54, 54, 53, 51, 53, 53, 52, 51, 52, 53, 53, 52, 52, 54, 53, 53, 53, 54, 53, 53, 52, 54, 53, 53, 52, 54, 52, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 55, 53, 53, 53, 55, 53, 53, 53, 55, 53, 53, 53, 55, 53, 53, 53, 54, 53, 53, 53, 54, 52, 52, 53, 53, 53, 52, 53, 53, 52, 53, 52, 52, 53, 53, 52, 52, 53, 52, 52, 52, 52, 53, 52, 52, 52, 53, 53, 52, 53, 52, 53, 52, 53, 53, 53, 52, 53, 53, 53, 53, 53, 53, 52, 53, 53, 53, 53, 54, 52, 53, 53, 54, 53, 53, 53, 54, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 54, 53, 54, 53, 54, 53, 54, 53, 54, 53, 54, 53, 54, 53, 55, 53, 54, 53, 55, 53, 53, 52, 55, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 54, 53, 52, 53, 54, 53, 52, 53, 54, 53, 52, 53, 54, 53, 52, 53, 55, 53, 51, 52, 55, 53, 52, 53, 55, 53, 53, 53, 53, 56, 53, 53, 56, 52, 52, 53, 55, 53, 53, 53, 55, 52, 53, 53, 56, 52, 53, 53, 58, 52, 54, 52, 58, 54, 53, 53, 59, 55, 52, 53, 58, 52, 53, 53, 58, 52, 54, 53, 57, 53, 53, 52, 58, 53, 53, 53, 58, 54, 54, 52, 57, 52, 53, 53, 58, 52, 52, 52, 58, 53, 52, 53, 58, 52, 53, 52, 58, 53, 52, 52, 57, 53, 53, 53, 57, 53, 53, 52, 56, 53, 53, 53, 57, 53, 52, 52, 56, 53, 52, 53, 56, 53, 52, 53, 56, 52, 52, 52, 56, 52, 53, 53, 55, 53, 52, 53, 55, 53, 53, 53, 56, 53, 52, 52, 55, 53, 53, 53, 56, 53, 53, 53, 56, 52, 53, 54, 54, 53, 53, 53, 55, 54, 55, 52, 56, 53, 52, 52, 55, 53, 53, 52, 53, 54, 55, 52, 53, 52, 55, 53, 52, 52, 56, 52, 51, 53, 55, 53, 50, 53, 55, 53, 50, 53, 54, 53, 50, 53, 53, 52, 51, 52, 52, 52, 55, 52, 51, 53, 58, 52, 50, 53, 60, 52, 47, 52, 57, 53, 42, 53, 51, 61, 44, 56, 52, 48, 49, 55, 50, 60, 44, 53, 58, 45, 45, 54, 54, 55, 50, 51, 54, 47, 52, 53, 57, 58, 54, 54, 53, 59, 55, 52, 56, 53, 55, 53, 56, 48, 55, 53, 51, 59, 61, 53, 52, 50, 56, 53, 56, 58, 53, 53, 53, 47, 56, 53, 53, 54, 51, 53, 55, 47, 48, 52, 56, 55, 49, 53, 52, 54, 48, 53, 55, 53, 47, 52, 53, 53, 51, 53, 54, 55, 51, 52, 53, 50, 51, 52, 55, 53, 54, 52, 53, 53, 57, 52, 54, 52, 58, 53, 54, 51, 60, 52, 54, 52, 63, 53, 52, 53, 62, 52, 54, 51, 60, 52, 51, 54, 58, 53, 50, 53, 54, 52, 51, 52, 51, 53, 55, 54, 50, 52, 56, 53, 49, 52, 57, 52, 48, 53, 55, 53, 48, 52, 54, 53, 50, 53, 54, 54, 51, 53, 54, 52, 54, 53, 53, 54, 57, 54, 54, 53, 59, 53, 54, 53, 59, 53, 54, 53, 58, 53, 53, 54, 56, 53, 54, 53, 55, 53, 54, 53, 55, 53, 53, 53, 53, 53, 54, 53, 51, 53, 54, 52, 49, 53, 54, 52, 48, 53, 54, 52, 47, 52, 54, 53, 46, 53, 54, 53, 48, 53, 54, 53, 50, 53, 54, 52, 52, 53, 54, 53, 54, 53, 53, 52, 56, 52, 53, 53, 58, 52, 53, 53, 58, 53, 53, 54, 58, 53, 54, 53, 58, 53, 54, 53, 58, 53, 53, 53, 57, 52, 53, 53, 54, 52, 54, 53, 53, 53, 53, 53, 51, 52, 53, 53, 50, 52, 53, 53, 50, 53, 54, 53, 50, 52, 54, 53, 51, 52, 54, 52, 52, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 55, 52, 53, 53, 56, 53, 54, 53, 57, 53, 53, 53, 58, 53, 53, 53, 57, 53, 53, 53, 56, 53, 53, 53, 55, 53, 54, 53, 53, 53, 54, 53, 52, 53, 54, 53, 50, 53, 54, 53, 49, 53, 54, 52, 49, 52, 54, 53, 49, 53, 54, 52, 50, 53, 54, 53, 51, 53, 54, 53, 52, 53, 54, 53, 53, 52, 54, 53, 54, 53, 53, 53, 54, 53, 54, 53, 55, 53, 53, 53, 56, 53, 53, 53, 56, 53, 53, 53, 55, 53, 53, 53, 54, 52, 53, 53, 53, 53, 54, 53, 53, 52, 53, 53, 52, 53, 53, 53, 52, 53, 53, 53, 51, 53, 54, 52, 52, 53, 54, 53, 52, 52, 54, 53, 53, 53, 54, 53, 53, 53, 53, 53, 54, 52, 54, 53, 55, 53, 53, 53, 56, 53, 54, 53, 56, 53, 53, 53, 56, 53, 53, 53, 56, 52, 54, 53, 56, 52, 53, 52, 55, 52, 53, 52, 54, 52, 54, 52, 53, 52, 53, 53, 52, 53, 54, 53, 52, 53, 53, 53, 51, 53, 54, 53, 51, 53, 54, 53, 51, 53, 54, 53, 52, 53, 54, 53, 52, 53, 53, 53, 53, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 55, 53, 53, 53, 55, 53, 53, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 53, 52, 52, 54, 53, 51, 53, 54, 53, 51, 53, 54, 53, 51, 52, 53, 53, 51, 53, 54, 53, 52, 53, 54, 53, 52, 53, 54, 53, 53, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 55, 53, 53, 53, 55, 53, 53, 53, 56, 53, 54, 53, 55, 53, 54, 52, 55, 53, 54, 53, 54, 53, 53, 53, 54, 52, 54, 53, 53, 52, 53, 53, 53, 53, 53, 53, 53, 52, 53, 53, 53, 52, 53, 52, 53, 53, 54, 53, 53, 52, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 54, 53, 53, 53, 54, 53, 53, 53, 55, 53, 53, 53, 55, 52, 53, 53, 55, 52, 53, 53, 54, 53, 54, 53, 54, 53, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 53, 52, 53, 54, 53, 52, 53, 54, 53, 52, 53, 54, 53, 52, 53, 54, 53, 52, 53, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 52, 54, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 54, 53, 53, 52, 53, 53, 53, 53, 54, 53, 53, 51, 54, 53, 52, 53, 53, 53, 52, 53, 54, 53, 52, 53, 54, 52, 53, 52, 54, 53, 53, 53, 54, 53, 54, 52, 54, 53, 54, 53, 54, 52, 54, 53, 53, 53, 54, 53, 53, 53, 55, 53, 53, 53, 54, 53, 53, 53, 55, 53, 53, 53, 54, 52, 54, 53, 54, 53, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 54, 53, 53, 52, 54, 53, 52, 52, 54, 53, 52, 52, 53, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 52, 52, 52, 54, 53, 52, 53, 54, 53, 52, 52, 54, 53, 52, 53, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 53, 54, 53, 54, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 52, 54, 53, 54, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 52, 53, 53, 54, 53, 53, 53, 54, 53, 54, 53, 54, 53, 53, 53, 54, 52, 54, 53, 54, 53, 53, 53, 53, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53, 54, 53, 53, 53
};

/**
 * @brief      Copy raw feature data in out_ptr
 *             Function called by inference library
 *
 * @param[in]  offset   The offset
 * @param[in]  length   The length
 * @param      out_ptr  The out pointer
 *
 * @return     0
 */
int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}


/**
 * @brief      Arduino setup function
 */
void setup()
{
    // put your setup code here, to run once:
    Serial.begin(115200);
    // comment out the below line to cancel the wait for USB connection (needed for native USB)
    while (!Serial);
    Serial.println("Edge Impulse Inferencing Demo");
}

/**
 * @brief      Arduino main function
 */
void loop()
{
    ei_printf("Edge Impulse standalone inferencing (Arduino)\n");

    if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        ei_printf("The size of your 'features' array is not correct. Expected %lu items, but had %lu\n",
            EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
        delay(1000);
        return;
    }

    ei_impulse_result_t result = { 0 };

    // the features are stored into flash, and we don't want to load everything into RAM
    signal_t features_signal;
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
    features_signal.get_data = &raw_feature_get_data;

    // invoke the impulse
    EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false /* debug */);
    ei_printf("run_classifier returned: %d\n", res);

    if (res != 0) return;

    // print the predictions
    ei_printf("Predictions ");
    ei_printf("(DSP: %d ms., Classification: %d ms., Anomaly: %d ms.)",
        result.timing.dsp, result.timing.classification, result.timing.anomaly);
    ei_printf(": \n");
    ei_printf("[");
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        ei_printf("%.5f", result.classification[ix].value);
#if EI_CLASSIFIER_HAS_ANOMALY == 1
        ei_printf(", ");
#else
        if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
            ei_printf(", ");
        }
#endif
    }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("%.3f", result.anomaly);
#endif
    ei_printf("]\n");

    // human-readable predictions
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        ei_printf("    %s: %.5f\n", result.classification[ix].label, result.classification[ix].value);
    }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("    anomaly score: %.3f\n", result.anomaly);
#endif

    delay(1000);
}
